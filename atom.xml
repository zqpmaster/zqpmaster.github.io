<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[一切从简]]></title>
  <link href="http://blog.sheliw.com/atom.xml" rel="self"/>
  <link href="http://blog.sheliw.com/"/>
  <updated>2014-10-25T13:27:24+08:00</updated>
  <id>http://blog.sheliw.com/</id>
  <author>
    <name><![CDATA[一切从简]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[正方教务管理系统IOS客户端]]></title>
    <link href="http://blog.sheliw.com/blog/2014/10/25/zheng-fang-jiao-wu-guan-li-xi-tong-ioske-hu-duan/"/>
    <updated>2014-10-25T13:16:47+08:00</updated>
    <id>http://blog.sheliw.com/blog/2014/10/25/zheng-fang-jiao-wu-guan-li-xi-tong-ioske-hu-duan</id>
    <content type="html"><![CDATA[<h2>正方教务系统IOS客户端DEMO</h2>

<p>用到的几个工具</p>

<ul>
<li>chrome的开发者工具   查看每次HTTP请求命令与参数等。</li>
<li>AFNetworking    ios网络请求开源框架，同样的有ASIHttprequest。选择AFnetworking是因为它更简单，并且现在还在更新维护，ASI好像好久没有更新。</li>
<li>TFhepple    Html分析类库。</li>
</ul>


<p>正方教务系统因为没有对应的JSON或者XML数据接口，所以只能模拟网页的所有行为，获取html 分析html。
正方教务系统用的编码是GB2312 框架获取下来的NSString虽然已经自动解码，但是很不稳定，有时候会得到空字符串，但是获取下来的DATA就没有这个问题，所以就要手动解码将DATA转为NSString。</p>

<p> <pre><code>cess:^(AFHTTPRequestOperation <em>operation, id responseObject) {
                 NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding (kCFStringEncodingGB_18030_2000);               <br/>
                 NSData </em>data=responseObject;
                 NSString *transStr=[[NSString alloc]initWithData:data encoding:enc];</code></pre>
光转码也不行，在分析HTML的时候因为网页头部的编码信息也有问题，所以要做手动修改，这样才能被TFhepple正确解
析。</p>

<pre><code> 
 NSString *utf8HtmlStr = [transStr stringByReplacingOccurrencesOfString:@"http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\">" withString:@"http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">"];
              NSData *htmlDataUTF8 = [utf8HtmlStr dataUsingEncoding:NSUTF8StringEncoding];
              TFHpple *xpathParser = [[TFHpple alloc]initWithHTMLData:htmlDataUTF8];</code></pre>


<p>成绩页面修改的方式有所不同
        <pre><code>  NSString *utf8HtmlStr = [transStr stringByReplacingOccurrencesOfString:@&ldquo;content=\"text/html; charset=gb2312\&rdquo; http-equiv=\&ldquo;Content-Type\&rdquo;>&ldquo; withString:@"http-equiv=\"Content-Type\&rdquo; content=\&ldquo;text/html; charset=utf-8\&rdquo;>&ldquo;];</code></pre></p>

<p>其他页面要怎么替换具体要看页面头部具体的信息是什么，然后写在 stringByReplacingOccurrencesOfString方法第一个参数部分就可以。</p>

<p>模拟登陆部分
首先是获取Cookie，这个用 NSURLRequest就能获取到，之后要在每次请求的时候加到 NSMutableURLRequest 里。AFnetworking在每次请求的时候都会建立一个NSURLRequest对象，改这个就可以。代码如下
获取cookie</p>

<pre><code> 
    NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:@"
http://学校的网址/default2.aspx
"]];
                                              //  cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
                                            //timeoutInterval:3];
       
       [NSURLConnection sendSynchronousRequest:request
                             returningResponse:nil
                                         error:nil];
       
       NSHTTPCookieStorage *cookieJar = [NSHTTPCookieStorage sharedHTTPCookieStorage];
       NSArray *cookies =[cookieJar cookies];
       _cookieDictionary= [NSHTTPCookie requestHeaderFieldsWithCookies:cookies];
</code></pre>


<p>
获取验证码的时候必须带上cookie,每次post或者get需要带上的是登陆成功后保存下来的cookie。</p>

<pre><code> 
- (AFHTTPRequestOperation *)POST:(NSString *)URLString
                      parameters:(NSDictionary *)parameters
                         success:(void (^)(AFHTTPRequestOperation *operation, id responseObject))success
                         failure:(void (^)(AFHTTPRequestOperation *operation, NSError *error))failure
{
    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:@"POST" URLString:[[NSURL URLWithString:URLString relativeToURL:self.baseURL] absoluteString] parameters:parameters error:nil];
//
    if(self.cookieDictionary) {
        [request setHTTPShouldHandleCookies:NO];
        [request setAllHTTPHeaderFields:self.cookieDictionary];
</code></pre>


<p></p>

<p>模拟登陆提交的参数有 用户名,密码，验证码还有一个viewstate，这个viewstate每次都得在登陆前获取验证码图片的时候同时获取 还是通过GET请求得到页面通过html分析工具得到对应的viwestate，具体可以看我的DEMO.然后在提交参数的时候一并提
交。</p>

<pre><code> 
NSDictionary *parameters = @{@"__VIEWSTATE":self.viewState,@"txtUserName"self.xueHao.text,@"TextBox2":self.miMa.text,@"txtSecretCode":self.yanZhengMa.text,@"RadioButtonList1":@"学生",@"Button1":@""};
</code></pre>


<p>
登陆成功之后就可以用cookie随意访问各个页面了。。不过在请求查询成绩页面的时候还要提交一个viewState,这个viewState参数是从登陆成功后的第一个页面获取，Very long。
并且在访问内部所有页面的时候都要在Request Header里加一个refer参数，这个参数跟提交cookie是一样的道理，学校的系统这个东西不提交不行，但是随便提交一个任何人的页面地址居然就可以了。这部分也是加在AFHTTPRequestOperationManager类里实现文件post 和get 方法底下。</p>

<pre><code> 
   if(self.cookieDictionary) {
        NSMutableDictionary*newDictionary=[self.cookieDictionary mutableCopy];
        [newDictionary setValue:@"http://gdjwgl.bjut.edu.cn/xs_main.aspx?xh=11111111" forKey:@"Referer"];
        [request setAllHTTPHeaderFields:newDictionary];
        
    }
</code></pre>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在Cocos2d-x游戏里集成iAd广告]]></title>
    <link href="http://blog.sheliw.com/blog/2014/10/25/ru-he-zai-cocos2d-xyou-xi-li-ji-cheng-iadyan-gao/"/>
    <updated>2014-10-25T12:54:03+08:00</updated>
    <id>http://blog.sheliw.com/blog/2014/10/25/ru-he-zai-cocos2d-xyou-xi-li-ji-cheng-iadyan-gao</id>
    <content type="html"><![CDATA[<p>1) Link binary with iAd.framework<a href="https://developer.apple.com/library/ios/#recipes/xcode_help-project_editor/Articles/AddingaLibrarytoaTarget.html">https://developer.apple.com/library/ios/#recipes/xcode_help-project_editor/Articles/AddingaLibrarytoaTarget.html</a></p>

<ol>
<li> In the project navigator, select your project</li>
<li> Select your target</li>
<li>  Select the &lsquo;Build Phases&rsquo; tab</li>
<li>  Open &lsquo;Link Binaries With Libraries&rsquo; expander</li>
<li>  Click the &lsquo;+&rsquo; button</li>
<li>  Select iAd.framework</li>
</ol>


<p>2) Download iAdSuite<a href="https://developer.apple.com/library/ios/#samplecode/iAdSuite/Introduction/Intro.html">https://developer.apple.com/library/ios/#samplecode/iAdSuite/Introduction/Intro.html</a> and copy files BannerViewController.h and BannerViewController.m from ContainerBanner project to your project.</p>

<p>3) Modify AppController.mm, add</p>

<pre><code>&lt;code&gt;&lt;pre&gt;#import "BannerViewController.h"&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>and replace</p>

<pre><code>@implementationAppController
</code></pre>

<p>with</p>

<pre><code>@implementationAppController
{
    BannerViewController*_bannerViewController;
}
</code></pre>

<p>and</p>

<pre><code>// Set RootViewController to window
if([[UIDevicecurrentDevice].systemVersionfloatValue]&lt; 6.0)
{
//
 warning: addSubView doesn't work on iOS6
    [window addSubview:viewController.view];
}else
{
//use this method on ios6
    [window setRootViewController:viewController];
}
</code></pre>

<p>with</p>

<pre><code>_bannerViewController=[[BannerViewController alloc]initWithContentViewController:viewController];
window.rootViewController=_bannerViewController;
</code></pre>

<p>4) Modify RootViewController.mm, add</p>

<pre><code>#import"BannerViewController.h"
</code></pre>

<p>and replace
<code><pre>
/<em>
//The designated initializer.  Override if you create the controller programmatically and want to perform customization that is not appropriate for viewDidLoad.
-(id)initWithNibName:(NSString </em>)nibNameOrNil bundle:(NSBundle <em>)nibBundleOrNil {
 if((self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil])) {
//Custom initialization
}
 return self;
}
</em>/
</code></pre>
with
<code><pre>
-(id)initWithNibName:(NSString<em>)nibNameOrNil bundle:(NSBundle</em>)nibBundleOrNil
 {
    if((self=[super initWithNibName:nibNameOrNil bundle:nibBundleOrNil])){
        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(willBeginBannerViewActionNotification:)    name:BannerViewActionWillBegin object:nil];
        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(didFinishBannerViewActionNotification:)name:BannerViewActionDidFinisho bject:nil];
}
    return self;
}
</code></pre></p>

<p>and add the following methods
<code><pre>
-(void)willBeginBannerViewActionNotification:(NSNotification<em>)notification{
    NSLog(@&ldquo;willBeginBannerViewActionNotification&rdquo;);
}
-(void)didFinishBannerViewActionNotification:(NSNotification</em>)notification
{
    NSLog(@&ldquo;didFinishBannerViewActionNotification&rdquo;);
}
</code></pre></p>

<p>In willBeginBannerViewActionNotification you can pause your game before the banner view triggers an advertising action. In didFinishBannerViewActionNotification you can resume your game when control is returned to it.</p>

<p>BannerViewController changes EAGLView size when banner becomes visible. If you use it like that, cocos2d-x may not detect touch location correctly. Here are the modifications to BannerViewController.m required to display ADBannerView on top of EAGLView.</p>

<p>1) Edit loadView method and put line</p>

<pre><code>[contentView addSubview:_bannerView];
</code></pre>

<p>after</p>

<pre><code>[contentView addSubview:_contentController.view];
</code></pre>

<p>loadView should look like this:
<code><pre>
-(void)loadView
{
    UIView *contentView=[[UIView alloc]initWithFrame[[UIScreen mainScreen]bounds]];
   [self addChildViewController:<em>contentController];
   [contentView addSubview:</em>contentController.view];
   [<em>contentController didMoveToParentViewController:self];
   [contentView addSubview:</em>bannerView];
   self.view=contentView;
}</code></pre>
2) Edit viewDidLayoutSubviews method and replace
<code><pre>
if(<em>bannerView.bannerLoaded)
 {
    contentFrame.size.height-=bannerFrame.size.height;
    bannerFrame.origin.y=contentFrame.size.height;
}else{
   bannerFrame.origin.y=contentFrame.size.height;
}
</code></pre>
with
<code><pre>
if(</em>bannerView.bannerLoaded)
 {
    bannerFrame.origin.y=0;
}else{
    bannerFrame.origin.y= -bannerFrame.size.height;
}
</code></pre>
P.S. Are you sure you want to use iAd? Besides low fill rate, there are some limitations. For instance, Apple’s policy is not to serve iAd advertisements to applications that are designed for children as stated at <a href="https://developer.apple.com/support/ios/iad-network.html.">https://developer.apple.com/support/ios/iad-network.html.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSOperationQueue与GCD的区别]]></title>
    <link href="http://blog.sheliw.com/blog/2014/10/11/nsoperationqueue-vs-gcd/"/>
    <updated>2014-10-11T10:49:58+08:00</updated>
    <id>http://blog.sheliw.com/blog/2014/10/11/nsoperationqueue-vs-gcd</id>
    <content type="html"><![CDATA[<p>首先，我们要明确NSOperationQueue与GCD之间的关系</p>

<p>NSOpertaionQueue用GCD构建封装的，是GCD的高级抽象。
其次，我们要区别两者的不同</p>

<p>GCD仅仅支持FIFO队列，而NSOperationQueue中的队列可以被重新设置优先级，从而实现不同操作的执行顺序调整。
GCD不支持异步操作之间的依赖关系设置。如果某个操作的依赖另一个操作的数据（生产者-消费者模型是其中之一），使用NSOperationQueue能够按照正确的顺序执行操作。GCD则没有内建的依赖关系支持。</p>

<p>NSOperationQueue支持KVO，意味着我们可以观察任务的执行状态。</p>

<p>了解以上不同，我们可以从以下角度来定义原则</p>

<ol>
<li><p>性能
GCD更接近底层，而NSOperationQueue则更高级抽象，所以GCD在追求性能的底层操作来说，是速度最快的。这取决于使用Instruments进行代码性能分析，如有必要的话</p></li>
<li><p>从异步操作之间的事务性，顺序行，依赖关系，任务并发数量，任务优先级。GCD需要自己写更多的代码来实现，而NSOperationQueue已经内建了这些支持</p></li>
<li><p>如果异步操作的过程需要更多的被交互和UI呈现出来，NSOperationQueue会是一个更好的选择。底层代码中，任务之间不太互相依赖，而需要更高的并发能力，GCD则更有优势</p></li>
</ol>


<p>最后的一句话
别忘了高德纳的教诲：“在大概97%的时间里，我们应该忘记微小的性能提升。过早优化是万恶之源。”只有Instruments显示有真正的性能提升时才有必要用低级的GCD。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Block, weakSelf and strongSelf]]></title>
    <link href="http://blog.sheliw.com/blog/2014/10/04/block/"/>
    <updated>2014-10-04T15:07:23+08:00</updated>
    <id>http://blog.sheliw.com/blog/2014/10/04/block</id>
    <content type="html"><![CDATA[<p>Block is powerful in Objective-C. But there is a very stupid problem called cyclic retention pitfall, that a block locked an object so that the object will never be release.</p>

<p>For example, in the function:</p>

<pre><code>
NSBlockOperation *op = [[[NSBlockOperation alloc] init] autorelease];
[ op addExecutionBlock:^ {
    [self doSomething];
    [self doMoreThing];
} ];
[someOperationQueue addOperation:op];
</code></pre>


<p>When the block is created, the compiler will capture all objects that used inside the block and add reference count by 1. In this case, self will be locked and so the object will not be released until the block is finished. Note that cyclic retention pitfall is not only happened in self object, but in 99% case, it happens in self object.</p>

<h2>Weakify</h2>

<p>To solve the problem, we can simply create a weak reference of the self, and use the weak object instead of the original object inside block. When the weak object is used, the block will not increase the reference count, so self will not be locked. We call to weakify the self.</p>

<pre><code>
__weak __typeof__(self) weakSelf = self;
NSBlockOperation *op = [[[NSBlockOperation alloc] init] autorelease];
[ op addExecutionBlock:^ {
    [weakSelf doSomething];
    [weakSelf doMoreThing];
} ];
[someOperationQueue addOperation:op];
</code></pre>


<h2>When should use weakify</h2>

<p>The block will release all objects used inside the blocks scope after the block is finished. If the block is execution type block that will be released after execution is finished, e.g.:</p>

<ul>
<li>GCD dispatch block</li>
<li>Most UIKit block</li>
</ul>


<p>It should be safe not to use weakify technique because the block&rsquo;s lifetime is determined. However, if you are using block that will store block as variable, e.g.:</p>

<ul>
<li>Blocks in NSOperation, AFHTTPRequestOperation</li>
<li>Event handler block like something in BlocksKit</li>
</ul>


<p>Because the lifetime of the block is uncertained, it is suggested to use weakify to prevent cyclic retention pitfall.</p>

<p>Use AFHTTPRequestOperation as an example, if you simple call:</p>

<pre><code>
AFHTTPRequestOperation *op = [[AFHTTPRequestOperation alloc] initWithRequest:request];
op.responseSerializer = [AFJSONResponseSerializer serializer];
[op setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) {
    [self doSomethingUpdateControls];
    NSLog(@"JSON: %@", responseObject);
} failure:^(AFHTTPRequestOperation *operation, NSError *error) {
    NSLog(@"Error: %@", error);
}];
[op start];
</code></pre>


<p>self will be locked until the network operation finished. It may be okay in most case because it will at most cost several seconds to complete the operation.</p>

<p>But, if you are handling operations using operation queue:</p>

<pre><code>
AFHTTPRequestOperation *op = [[AFHTTPRequestOperation alloc] initWithRequest:request];
op.responseSerializer = [AFJSONResponseSerializer serializer];
[op setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) {
    [self doSomethingUpdateControls];
    NSLog(@"JSON: %@", responseObject);
} failure:^(AFHTTPRequestOperation *operation, NSError *error) {
    NSLog(@"Error: %@", error);
}];
[[NSOperationQueue mainQueue] addOperation:op];
</code></pre>


<p>There will be chance that the operation will be paused in the queue. When the operation object is not released, it will lock the block scope and so theself object. In this case, if the self object is a viewController and if you don&rsquo;t want to use weakify technique, you must make sure that you have to cancel all operations
[[NSOperationQueue mainQueue] removeAllOperations] at some point like [viewDidDisappeared:(BOOL)animated].</p>

<h2>Strongify</h2>

<p>But there is another problem, because now the self is weakified. Now self will be free and weakSelf can be nil any time. In the above case, the block may able to run doSomething but failed to run doMoreThing because weakSelf may be nullified at that time.</p>

<p>To solve this, we can strongify self before use:</p>

<pre><code>
__weak __typeof__(self) weakSelf = self;
NSBlockOperation *op = [[[NSBlockOperation alloc] init] autorelease];
[ op addExecutionBlock:^ {
    __strong __typeof__(self) strongSelf = weakSelf;
    [strongSelf doSomething];
    [strongSelf doMoreThing];
} ];
[someOperationQueue addOperation:op];
</code></pre>


<p>So self will not be released inside the block call until the life cycle of the strongSelf ends.</p>

<h2>When should use strongify</h2>

<p>However, should we use strongSelf every time inside a block?</p>

<p>Yes, it’s safe to use it every time.</p>

<p>No, sometimes you can simply use the weakSelf when:</p>

<ul>
<li>You don&rsquo;t care that self will be nullified in the middle of the block. e.g. setting control’s value. Note that although weakSelf may be released in the middle, it will be nullified and will not crash the code.</li>
<li>You are sure that the self will not be released in the middle. e.g. All block are running in main thread.</li>
</ul>


<h2>Syntax Sugar</h2>

<p>We can use a third party library libextobjc so that you can some more readable code like this:</p>

<pre><code>
@weakify(self);
NSBlockOperation *op = [[[NSBlockOperation alloc] init] autorelease];
[ op addExecutionBlock:^ {
    @strongify(self);   
    [self doSomething];
    [self doMoreThing];
} ];
[someOperationQueue addOperation:op];
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在Xcode5中完整更改iOS工程的名称]]></title>
    <link href="http://blog.sheliw.com/blog/2014/09/08/ru-he-wan-zheng-geng-gai-xcode5zhong-iosde-gong-cheng-ming-zi/"/>
    <updated>2014-09-08T18:18:49+08:00</updated>
    <id>http://blog.sheliw.com/blog/2014/09/08/ru-he-wan-zheng-geng-gai-xcode5zhong-iosde-gong-cheng-ming-zi</id>
    <content type="html"><![CDATA[<p>在用Xcode开发软件的时候难免会碰到项目更名的时候，重新更名目标名还是比较方便的，如何正确的更改「xcodeproj」的项目名还有对应的目录名字呢？</p>

<p>首先要做的是备份一下整个工程文件，防止一旦更名失败还有办法补救，不然一切都毁了。</p>

<p>更名很简单，只要选中Project，按回车，就可以重命名了，也可以在右边那里进行：</p>

<p>再输入了新的名字以后，Xcode会智能的提示你，是否要把所有项目相关的名称也给重命名了，选择「Rename」。</p>

<p>做完这一步后，原来的project文件夹，已经变成新名字了，与此对应还有一些其他文件的内容。还没有完，还有一个大文件夹还是老名字：接下去把Group的名字也已相同的方式重命名。</p>

<p>但是它不会自动也重命名整个Folder，这时，访问文件，手动将所有相关的文件夹重命名，除了.xcodeproj所在的目录名字，这个后面再改，然后Xcode会出现一大堆文件丢失，先不要理他，继续选中Group的名字，然后点击右边那个文件夹，就会出现一个「Choose a location」，选中新命名的文件夹来代表就可以了。</p>

<p>这时如果编译的话，会提示Info.plist找不到，需要选中Target，然后点击那个「Choose Info.plist File&hellip;」，选择之前被重命名的Info.plist文件即可。</p>

<p>做完这步后，按Command +shift +f全局搜索老工程名，除了所有类里面的注释以外 还有一些编译 build路径等，把这些都改为新工程名。类里边头部的注释就可改可不改了。</p>

<p>这时候编译还是无法通过，提示有文件找不到，其中还是引用了老的目录。这时就只好人工去修改文件 .xcodeproj 文件目录下的「project.pbxproj」文件了，里面还有几个字段是老工程名，全部替换成新工程名，然后这时候去更改.xcodeproj所在的目录名字，这样基本就大功告成了，如果还提示missing file等警告 可以通过移动目录，删除对应SVN文件等方式解决。</p>

<p>这样，重构项目很重要的一步：重命名项目和目录名，就这样完成了。</p>

<p>补充：xcodeproj/xcuserdata 及 xcodeproj/project.xcworkspace/ 都是用户及工作区的数据，版本控制时要ignore掉，特别是多人开发的情况下。</p>
]]></content>
  </entry>
  
</feed>
